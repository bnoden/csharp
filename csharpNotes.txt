
http://starboundsoftware.com/books/c-sharp/try-it-out/

byte	1	0 to 255
short	2	-32,768 to 32,767
int		4	-2,147,483,648 to 2,147,483,647
long	8	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,80

sbyte	1	-128 to +127
ushort	2	0 to 65,535
uint	4	0 to 4,294,967,295
ulong	8	0 to 18,446,744,073,709,551,615
char 	2	U+0000 to U+ffff (All Unicode characters)



Comment method descriptions
	-with XML comments

Value and Reference types
	int[] a = new int[] {1,2,3};
	int[] b = a; b[0] = 17;		// now a[0] == 17

Properties
	simplified in C#:
		private int score;
		public int Score {
			get {return score;}
			private set {score = value;}	// value is a keyword
		}
	even simpler:
		public int Score {get; set;}

		With above techniques you can now use player.Score instead of player.getScore() and player.setScore(int)
			also:
			public class Vector2 {
				public double X { get; set; } = 0;
				public double Y { get; set; } = 0;
			}

	Object initializer syntax:
		Book book = new Book() { Title = "Frankenstein", Author = "Mary Shelley" };


enum - reference type
class - reference type 
struct - value type 
	used to store compound data that does not involve complicated methods and behaviors
		all the simple types are structs
		primitive types are all aliases for certain pre-defined structs and classes 


Checking object type and casting
	ex:
	if (polygon is Square) {
		Square square = (Square)polygon;
	}

	The "as" keyword
		ex:
		Polygon polygon = new Square(4);
		Square square = polygon as Square;

	You can create an array of the base class and put any derived class inside of it.
	In any case where a base class can be used, you can always substitute a derived class.
		but constructors are not inherited

Sealed class - cannot be inherited

C# does not support multiple inheritance, unlike C++

override changes a virtual method from an abstract base class
	use base keyword for original implementation
		example-
			base.Search()
	new keyword is for new method with same name as method from base class, but unrelated
		should be avoided to prevent confusion

Interfaces
	interface members are always public and abstract


Variable number of parameters
	example - public static double Average(params int[] numbers) {}
				int[] numbers = new int[5] { 5, 4, 3, 2, 1 };
				Average(numbers);

double.Epsilon = smallest possible double
double.Infinity = infinitely large
double.NaN = !Number


String interpolation
	"Put {something} in a string"
	{somebignumber:N0} = number with commas, 0 decimals


